{"version":3,"sources":["config.js","components/silnavbar/SILNavBar.js","components/signup/SignUp.js","components/signin/SignIn.js","components/climberhome/ClimberHome.js","components/editprofile/EditProfile.js","components/projectlist/ProjectList.js","components/searchroutes/SearchRoutes.js","components/routedetails/RouteDetails.js","components/editroute/EditRoute.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","SILNavBar","props","Navbar","bg","expand","className","to","loggedInClimber","Fragment","onClick","onLogout","SignUp","onSubmit","onSignUp","type","id","name","aria-describedby","SignIn","onSignIn","onChange","onUnmount","errorMessage","style","color","ClimberHome","useState","setLoggedInClimberHome","useEffect","axios","get","withCredentials","then","response","data","Container","fluid","Image","src","alt","roundedCircle","username","Button","size","variant","EditProfile","setLoggedInClimber","console","log","event","onUsernameEdit","cloneProfile","JSON","parse","stringify","target","value","ProjectList","myProjects","map","route","Card","Title","routeName","Subtitle","routeType","Text","personalNotes","_id","SearchRoutes","position","searchedCity","Object","values","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","searchedRoutesResults","onRouteSearch","placeholder","length","MapContainer","width","height","center","zoom","scrollWheelZoom","TileLayer","attribution","url","i","positionMarker","latitude","longitude","customMarker","icon","Marker","Popup","rating","href","onAddRoute","RouteDetails","setRoute","routeDbId","match","params","routeRating","routePitches","routeLocation","dateAccomplished","onDelete","EditRoute","listType","onRouteEdit","cloneNotes","withRouter","setErrorMessage","setMyProjects","setSearchedRoutesResults","setSearchedCity","history","useHistory","handleSignUp","preventDefault","email","password","post","push","handleSignIn","catch","err","error","handleUsernameEdit","climber","patch","updatedClimber","handleProfilePhotoEdit","handleRouteSearch","location","searchResults","routesResponse","routes","filter","cityLatLon","handleAddRoute","routeId","handleUnmount","handleDelete","delete","filteredProjects","eachRoute","handleRouteEdit","updatedRoute","path","render","routeProps","onProfilePhotoEdit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2d986d9.chunk.js","sourcesContent":["export const API_URL = 'https://send-it-list.herokuapp.com/api'\n//export const API_URL = 'http://localhost:5000/api'","import React from 'react'\nimport { Navbar } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nimport './SILNavBar.css'\n\nconst SILNavBar = (props) => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\" className=\"nav-bar\">\n            <Link to=\"/home\" className=\"home-btn\">Home</Link>\n            {\n                props.loggedInClimber \n                ? (\n                    <React.Fragment>\n                        <Link to=\"/edit-profile\">Edit Profile</Link>\n                        <button onClick={props.onLogout} className=\"logout-btn\">Logout</button>\n                    </React.Fragment>\n                    ) \n                : (\n                    <React.Fragment>\n                        <Link to=\"/sign-in\">Sign In</Link>\n                        <Link to=\"/sign-up\">Sign Up</Link>\n                    </React.Fragment>                            \n                )\n            }\n\n        </Navbar>\n    )\n}\n\nexport default SILNavBar","import React from 'react'\nimport {Redirect} from 'react-router-dom'\n\nconst SignUp = (props) => {\n\n    if (props.loggedInClimber) {\n        return <Redirect to={'/home'} />\n    }\n    \n    return (\n        <form onSubmit={props.onSignUp}>\n            <div className=\"form-group\">\n                <label>Username </label>\n                <input type=\"text\" className=\"form-control\" id=\"usernameInput\" name=\"username\" />\n            </div>\n            <div className=\"form-group\">\n                <label>Email </label>\n                <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" aria-describedby=\"emailHelp\" />\n            </div>\n            <div className=\"form-group\">\n                <label>Password </label>\n                <input type=\"password\" className=\"form-control\" id=\"passwordInput\" name=\"password\" />\n                <br />\n                <small id=\"passwordRequirements\" className=\"form-text text-muted\">Password requirements: Minimum 8 characters, a number, a special character, an uppercase letter, and a lowercase letter.</small>                \n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        </form>\n    )\n}\n\nexport default SignUp","import React from 'react'\n\nconst SignIn = (props) => {\n    return (\n        <form onSubmit={props.onSignIn}>\n            <div className=\"form-group\">\n                <label>Email</label>\n                <input onChange={props.onUnmount} type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" aria-describedby=\"emailHelp\" />\n            </div>\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input name=\"password\" type=\"password\" className=\"form-control\" id=\"passwordInput\" />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>  \n\n            {\n                props.errorMessage ? (\n                    <p style={{color: 'red'}}>{props.errorMessage}</p>\n                ) : (null)\n            }\n\n        </form>\n    )\n}\n\nexport default SignIn","import React, {useEffect, useState } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport { Container, Image, Button } from 'react-bootstrap'\nimport axios from 'axios'\nimport {API_URL} from '../../config'\n\nimport './ClimberHome.css'\n\nconst ClimberHome = (props) => {\n\n  const [loggedInClimberHome, setLoggedInClimberHome] = useState({})\n\n  useEffect(() => {\n    axios.get(`${API_URL}/climber`, { withCredentials: true })\n    .then((response) => {\n        //console.log(response.data)\n        setLoggedInClimberHome(response.data)\n    })\n  }, [])\n\n    if (!props.loggedInClimber) {\n        return <Redirect to={'/sign-up'} />\n    }\n\n    return (\n        <div>\n            <Container fluid>\n                <Image className=\"profile-photo\" src=\"/images/defaultProfilePhoto.png\" alt=\"profile pic\" roundedCircle />\n                {\n                    props.loggedInClimber ? ( <h2>Hello, {props.loggedInClimber.username}!</h2> ) : null\n                }\n                <Button size=\"lg\" variant=\"light\"><Link to=\"/current-projects\" className=\"proj-links\">Current Projects</Link></Button>\n                <br />\n                <Button size=\"lg\" variant=\"light\"><Link to=\"/future-projects\" className=\"proj-links\">Potential Projects</Link></Button>\n                <br />\n                <Button size=\"lg\" variant=\"light\"><Link to=\"/sent-projects\" className=\"proj-links\">Sent Projects</Link></Button>\n                <br />\n                <Button size=\"lg\" variant=\"light\"><Link to=\"/search-routes\" className=\"search-link\">Search routes</Link></Button>\n            </Container>    \n        </div>\n    )\n\n}\n\nexport default ClimberHome","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nimport {API_URL} from '../../config'\n\nconst EditProfile = (props) => {\n\n    const [loggedInClimber, setLoggedInClimber] = useState({})\n\n    useEffect(() => {\n        axios.get(`${API_URL}/climber`, { withCredentials: true })\n            .then((response) => {\n                console.log('routedbid response', response)\n                setLoggedInClimber(response.data)\n        })\n    }, [])\n\n    const handleNameChange = (event) => {\n        let cloneProfile = JSON.parse(JSON.stringify(loggedInClimber))\n        cloneProfile.username = event.target.value\n        setLoggedInClimber(cloneProfile)\n    }\n\n    const { username } = loggedInClimber\n\n    return (\n        <React.Fragment>\n        <form onSubmit={ (event) => {props.onUsernameEdit(event, loggedInClimber)}}>\n            <label>Username: </label>\n            <input onChange={handleNameChange} type=\"text\" value={username} name=\"username\" ></input>\n            <button type=\"submit\">Save username edit</button>\n        </form>\n\n            <hr /> \n\n        {/* <form onSubmit={ (event) => {props.onProfilePhotoEdit(event, loggedInClimber)}}>\n            <label>Profile photo: </label>\n            <input onChange={handleNameChange} type=\"text\" value={username} ></input>\n            <button type=\"submit\">Upload image</button>\n        </form> */}\n        </React.Fragment>\n    )\n}\n\nexport default EditProfile","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Container, Card } from 'react-bootstrap'\nimport './ProjectList.css'\n\nconst ProjectList = (props) => {\n\n    const { myProjects } = props\n    //console.log(myProjects)\n\n    return (\n        <React.Fragment>\n            {\n                myProjects.map((route) => {\n                    return (\n                        <Container key={route._id} className=\"route-card\">\n                            <Card fluid=\"true\">\n                                    <Card.Title>{route.routeName}</Card.Title>\n                                    <Card.Subtitle className=\"mb-2 text-muted\">{route.routeType}</Card.Subtitle>\n                                    <Card.Text>\n                                        Personal Notes: { route.personalNotes ? (<p>{route.personalNotes}</p>) : (<p>No notes yet!</p>) }\n                                    </Card.Text>\n                                    <Link to={`/details/${route._id}`}>More info</Link>\n                            </Card>\n                        </Container>\n                    )\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default ProjectList","import React, {useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet';\n\nconst SearchRoutes = (props) => {\n    \n    const position = props.searchedCity ? Object.values(props.searchedCity) : [34.0522, -118.2437]\n\n    useEffect(() => {\n        //for leaflet marker\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n          iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n          iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n          shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n        });\n      }, []);\n\n    useEffect(() => {\n        return props.onUnmount\n    }, [])\n\n    const searchedRoutesResults = props.searchedRoutesResults || []\n    console.log('within searchroutes js', searchedRoutesResults)\n\n    return(\n        <React.Fragment>\n            <h1>Search Routes</h1>\n            <form onSubmit={props.onRouteSearch}>\n                <input type=\"text\" name=\"location\" placeholder=\"Location\" />\n                     <select name=\"routeType\">\n                        <option value=\"Boulder\">Boulder</option>\n                        <option value=\"Sport\">Sport</option>\n                        <option value=\"Trad\">Trad</option>\n                    </select>\n                <button type=\"submit\">Submit</button>\n            </form>\n            {\n                searchedRoutesResults.length ? (\n                <MapContainer style={{width: '900px', height: '400px'}} center={position} zoom={13} scrollWheelZoom={false}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                        {\n                            searchedRoutesResults.map((route, i) => {\n                                let positionMarker  = [route.latitude, route.longitude]\n                                const customMarker = L.icon({ iconUrl: 'https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-32.png', })\n                                return  (\n                                    <Marker icon={customMarker} position={positionMarker} key={route.id}>\n                                        <Popup>\n                                            <b>Name: </b>{route.name}\n                                            <br />\n                                            <b>Type: </b>{route.type}\n                                            <br />\n                                            <b>Rating: </b>{route.rating}\n                                            <br />\n                                            <a href={route.url} target=\"_blank\">More details on MountainProject</a>\n                                            <br />\n                                            <button onClick={ () => {props.onAddRoute(route.id)} }>Add route</button>\n                                        </Popup>\n                                    </Marker>)\n                            })\n                        }\n                </MapContainer>\n                ) : null\n            }\n        </React.Fragment>\n    )\n}\nexport default SearchRoutes\n\n// import React, {useState, useEffect} from 'react'\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\n// import 'leaflet/dist/leaflet.css'\n\n// const SearchRoutes = (props) => {\n\n//     const [lat, setLat] = useState(51.505)\n//     const [lon, setLon] = useState( -0.09)\n\n\n//     // useEffect(() => {\n//     //     //console.log('alltheparse', JSON.stringify(mapCenter))\n//     //     //if (props.searchedCity) console.log('somanyparentheses', JSON.stringify(Object.values(props.searchedCity)))\n//     //     let values;\n//     //     console.log(\"props\", props.searchedCity)\n//     //     if (props.searchedCity) values = Object.values(props.searchedCity)\n//     //     console.log(\"values\", values)\n//     //     if ( (props.searchedCity) && values[0] !== lat && values[1] !== lon ) {\n\n        \n//     //         console.log(\"updating the state\")\n//     //     setLat(values[0])\n//     //     setLon(values[1])\n//     //     }\n//     // }, [])\n\n  \n//     const searchedRoutesResults = props.searchedRoutesResults || []\n//     console.log(searchedRoutesResults)\n//     return(\n//         <React.Fragment>\n\n//             <h1>Search Routes</h1>\n//             <h1>{51.585}</h1>\n//             <form onSubmit={props.onRouteSearch}>\n//                 <input type=\"text\" name=\"location\" placeholder=\"Location\" />\n//                      <select name=\"routeType\">\n//                         <option value=\"Boulder\">Boulder</option>\n//                         <option value=\"Sport\">Sport</option>\n//                         <option value=\"Trad\">Trad</option>\n//                     </select>\n//                 <button type=\"submit\">Submit</button>\n//             </form>\n//             {\n//                 searchedRoutesResults.length ? (\n//             <MapContainer style={{width: '300px', height: '400px'}} center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n// {\n//                         searchedRoutesResults.splice(0, 5).map((route, i) => {\n//                             let position  = [51.985 +i,15.17+i]\n//                         return <Marker position={[position]} key={route.id}>\n//                             <Popup >\n//                                 Name: `${route.name}`\n//                                 <br />\n//                                 Type: `${route.type}`\n//                                 <br />\n//                                 Rating: `${route.rating}`\n//                                 <button onClick={ () => {props.onAddRoute(route.id)} }></button>\n//                             </Popup>\n//                         </Marker>\n//                     })\n// }\n//             </MapContainer>\n//                     ) : null\n//                 }\n\n\n\n//         </React.Fragment>\n//     )\n// }\n\n// export default SearchRoutes","import React, { useState, useEffect } from 'react'\nimport {Link} from 'react-router-dom'\nimport axios from 'axios'\n\nimport {API_URL} from '../../config'\n\nconst RouteDetails = (props) => {\n\n    const [route, setRoute] = useState({})\n\n    useEffect(() => {\n        //console.log('routeprops', props)\n        let routeDbId = props.match.params.routeDbId\n\n        axios.get(`${API_URL}/details/${routeDbId}`, { withCredentials: true })\n            .then((response) => {\n                console.log('routedbid response', response)\n                setRoute(response.data)\n            })\n    }, [])\n\n    const { _id, routeName, routeType, routeRating, routePitches, routeLocation, personalNotes, dateAccomplished } = route\n\n    return (\n        <div>\n            Route Name: {routeName}\n            <br />\n            Route Type: {routeType}\n            <br />\n            Route Rating: {routeRating}\n            <br />\n            {\n                routeType == 'Boulder' ? null : (<p>Route Pitches: {routePitches}</p>)\n            }\n            <br />\n            {routeLocation}\n            <br />\n            Personal Notes: { personalNotes }\n            <br />\n            Date Accomplished: { dateAccomplished }\n            {/* need a ternary here for if listType is sent */}\n            <br />\n            <Link to={`/edit/${_id}`}><button>Edit</button></Link>\n            <button onClick={ () => { props.onDelete(_id) } }>Delete</button>\n        </div>\n    )\n}\n\nexport default RouteDetails","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport {API_URL} from '../../config'\n\nconst EditRoute = (props) => {\n\n    const [route, setRoute] = useState({})\n\n    useEffect(() => {\n        //console.log('routeprops', props)\n        let routeDbId = props.match.params.routeDbId\n\n        axios.get(`${API_URL}/details/${routeDbId}`, { withCredentials: true })\n            .then((response) => {\n                console.log('routedbid response', response)\n                setRoute(response.data)\n        })\n    }, [])\n\n    const personalNotesEdit = (event) => {\n        let cloneNotes = JSON.parse(JSON.stringify(route))\n        cloneNotes.personalNotes = event.target.value\n        setRoute(cloneNotes)\n    }\n\n    const { routeName, routeType, routeRating, routePitches, routeLocation, personalNotes, dateAccomplished, listType } = route\n\n    return (\n        <form onSubmit={ (event) => {props.onRouteEdit(event, route)}}>\n            Route Name: {routeName}\n            <br />\n            Route Type: {routeType}\n            <br />\n            Route Rating: {routeRating}\n            <br />\n            {\n                routeType == 'Boulder' ? null : (<p>Route Pitches: {routePitches}</p>)\n            }\n            <br />\n            {routeLocation}\n            <br />\n            <label>Personal Notes: </label>\n            <input name=\"personalNotes\" onChange={personalNotesEdit} type=\"text\" value={personalNotes}></input>\n            <br />\n            <label>Date Accomplished </label>\n            <input name=\"dateAccomplished\" type=\"text\" value={dateAccomplished}></input>\n            <br />\n            <label>List </label>\n            <select name=\"listType\">\n                <option value={listType}>{listType}</option>\n                <option value=\"current\">Current</option>\n                <option value=\"future\">Future</option>\n                <option value=\"sent\">Sent</option>\n            </select>\n            <br />\n            <button type=\"submit\">Edit</button>\n        </form>\n    )\n}\n\nexport default EditRoute","import React, { useState, useEffect } from 'react'\nimport { Switch, Route, withRouter, useHistory } from 'react-router-dom'\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport axios from 'axios'\n\nimport {API_URL} from './config'\n\nimport SILNavBar from './components/silnavbar/SILNavBar'\nimport SignUp from './components/signup/SignUp'\nimport SignIn from './components/signin/SignIn'\nimport ClimberHome from './components/climberhome/ClimberHome'\nimport EditProfile from './components/editprofile/EditProfile'\nimport ProjectList from './components/projectlist/ProjectList'\nimport SearchRoutes from './components/searchroutes/SearchRoutes'\nimport RouteDetails from './components/routedetails/RouteDetails'\nimport EditRoute from './components/editroute/EditRoute'\n\nconst App = () => {\n\n  const [loggedInClimber, setLoggedInClimber] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [myProjects, setMyProjects] = useState([])\n  const [searchedRoutesResults, setSearchedRoutesResults] = useState([])\n  const [searchedCity, setSearchedCity] = useState(null)\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!loggedInClimber) {\n      axios.get(`${API_URL}/climber`, { withCredentials: true })\n        .then((response) => {\n          console.log(response.data)\n          setLoggedInClimber(response.data)\n        })\n    }\n\n    axios.get(`${API_URL}/myProjects`, { withCredentials: true })\n      .then((response) => {\n        setMyProjects(response.data)\n      })\n  }, [])\n\n  const handleSignUp = (event) => {\n    event.preventDefault();\n\n    const { username, email, password } = event.target\n\n    axios.post(`${API_URL}/signup`, {\n      username: username.value,\n      email: email.value,\n      password: password.value\n    }, {withCredentials: true})\n      .then((response) => {\n        setLoggedInClimber(response.data)\n        history.push('/home')\n      })\n  }\n\n  const handleSignIn = (event) => {\n    event.preventDefault();\n\n    const { email, password } = event.target\n\n    axios.post(`${API_URL}/signin`, {\n      email: email.value,\n      password: password.value\n    }, { withCredentials: true })\n      .then((response) => {\n        setLoggedInClimber(response.data)\n        history.push('/home')\n      })\n      .catch((err) => {\n        setErrorMessage(err.response.data.error)\n      })\n  }\n\n  const handleLogOut = () => {\n    axios.post(`${API_URL}/logout`, {}, { withCredentials: true })\n      .then(() => {\n        setLoggedInClimber(null)\n        history.push('/')\n      })\n  }\n\n  const handleUsernameEdit = (event, climber) => {\n    event.preventDefault();\n\n    const { username } = event.target\n    \n    //console.log('handle edit')\n    axios.patch(`${API_URL}/editUsername/${climber._id}`, {username: username.value}, { withCredentials: true })\n      .then((updatedClimber) => {\n          setLoggedInClimber(updatedClimber)\n          history.push('/home')          \n      })\n  }\n\n  const handleProfilePhotoEdit = (event, climber) => {\n    console.log('profile photo edit')\n  }\n\n  const handleRouteSearch = (event) => {\n    event.preventDefault();\n\n    const { location, routeType } = event.target\n    console.log(routeType.value)\n\n    axios.get(`${API_URL}/mapSearch/${location.value}`, { withCredentials: true })\n      .then((response) => {\n        let searchResults = response.data.routesResponse.routes\n        setSearchedRoutesResults(searchResults.filter((route) => {\n            return route.type === routeType.value\n            }))\n        setSearchedCity(response.data.cityLatLon)\n        console.log('within function', searchedRoutesResults)\n      })\n  }\n\n  const handleAddRoute = (routeId) => {\n\n    axios.get(`${API_URL}/add-climbing-route/${routeId}`, { withCredentials: true })\n      .then((response) => {\n        setMyProjects(...myProjects, response)\n        history.push('/home')\n      })\n  }\n\n  const handleUnmount = () => {\n    setSearchedRoutesResults(null)\n\n  }\n\n  const handleDelete = (routeDbId) => {\n    axios.delete(`${API_URL}/delete/${routeDbId}`, { withCredentials: true })\n      .then(() => {\n\n        let filteredProjects = myProjects.filter((eachRoute) => {\n              return eachRoute._id !== routeDbId\n          })\n\n        setMyProjects(filteredProjects)\n        history.push('/home')\n      })\n  }\n\n  const handleRouteEdit = (event, route) => {\n    event.preventDefault();\n    console.log('routeDbId', route._id)\n\n    const { personalNotes, dateAccomplished, listType } = event.target\n    \n    //console.log('handle edit')\n    axios.patch(`${API_URL}/edit/${route._id}`, {\n      personalNotes: personalNotes.value,\n      dateAccomplished: dateAccomplished.value,\n      listType: listType.value\n    }, { withCredentials: true })\n      .then(() => {\n        let updatedRoute = myProjects.map((eachRoute) => {\n          if (eachRoute._id == route._id) {\n            eachRoute = route\n          }\n          return eachRoute\n        })\n\n        setMyProjects(updatedRoute)\n        history.push('/home')\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Send-It List</h1>\n      <SILNavBar onLogout={handleLogOut} loggedInClimber={loggedInClimber}/>\n\n      <Switch>\n\n        <Route path=\"/sign-up\" render={ (routeProps) => {\n          return <SignUp onSignUp={handleSignUp} {...routeProps} loggedInClimber={loggedInClimber} />\n        } }/>\n\n        <Route path=\"/sign-in\" render={ (routeProps) => {\n          return <SignIn onSignIn={handleSignIn} {...routeProps} errorMessage={errorMessage} />\n        } } />\n\n        <Route path=\"/home\" render={ () => {\n          return <ClimberHome loggedInClimber={loggedInClimber} />\n        } }/>\n\n        <Route path=\"/edit-profile\" render={ (routeProps) => {\n          return <EditProfile {...routeProps} loggedInClimber={loggedInClimber} onUsernameEdit={handleUsernameEdit} onProfilePhotoEdit={handleProfilePhotoEdit}/>\n        } } />\n\n        <Route path=\"/current-projects\" render={ (routeProps) => {\n          return <ProjectList {...routeProps} onDelete={handleDelete} myProjects={myProjects.filter((route) => {\n            return route.listType === 'current'\n            })} />\n        } }/>\n\n        <Route path=\"/future-projects\" render={ (routeProps) => {\n          return <ProjectList {...routeProps} onDelete={handleDelete} myProjects={myProjects.filter((route) => {\n            return route.listType === 'future'\n            })} />\n        } }/>\n\n        <Route path=\"/sent-projects\" render={ (routeProps) => {\n          return <ProjectList {...routeProps} onDelete={handleDelete} myProjects={myProjects.filter((route) => {\n            return route.listType === 'sent'\n            })} />\n        } }/>\n\n        <Route path=\"/search-routes\" render={ (routeProps) => {\n          return <SearchRoutes {...routeProps} onRouteSearch={handleRouteSearch} onAddRoute={handleAddRoute} searchedRoutesResults={searchedRoutesResults} searchedCity={searchedCity} onUnmount={handleUnmount}/>\n        } }/>\n\n        <Route path=\"/details/:routeDbId\" render={ (routeProps) => {\n          return <RouteDetails {...routeProps} onDelete={handleDelete} />\n        } }></Route>\n\n        <Route path=\"/edit/:routeDbId\" render={ (routeProps) => {\n          return <EditRoute {...routeProps} onRouteEdit={handleRouteEdit} />\n        } }></Route>\n\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default withRouter(App);\n\n//add onUnmount to signIn\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}