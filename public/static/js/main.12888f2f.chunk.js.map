{"version":3,"sources":["config.js","components/silnavbar/SILNavBar.js","components/signup/SignUp.js","components/signin/SignIn.js","components/climberhome/ClimberHome.js","components/projectlist/ProjectList.js","components/searchroutes/SearchRoutes.js","components/routedetails/RouteDetails.js","components/editroute/EditRoute.js","App.js","reportWebVitals.js","index.js"],"names":["API_URL","SILNavBar","props","Navbar","bg","expand","className","to","loggedInClimber","onClick","onLogout","Fragment","SignUp","onSubmit","onSignUp","type","id","name","aria-describedby","SignIn","onSignIn","onChange","onUnmount","errorMessage","style","color","ClimberHome","Container","fluid","Image","src","alt","roundedCircle","username","Button","size","variant","ProjectList","myProjects","map","route","Card","Title","routeName","Subtitle","routeType","Text","personalNotes","Link","_id","SearchRoutes","position","searchedCity","Object","values","useEffect","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","searchedRoutesResults","console","log","onRouteSearch","placeholder","value","length","MapContainer","width","height","center","zoom","scrollWheelZoom","TileLayer","attribution","url","i","positionMarker","latitude","longitude","customMarker","icon","Marker","Popup","rating","onAddRoute","RouteDetails","useState","setRoute","routeDbId","match","params","axios","get","withCredentials","then","response","data","routeRating","routePitches","routeLocation","dateAccomplished","onDelete","EditRoute","listType","event","onEdit","cloneNotes","JSON","parse","stringify","target","withRouter","setLoggedInClimber","setErrorMessage","setMyProjects","setSearchedRoutesResults","setSearchedCity","history","useHistory","handleSignUp","preventDefault","email","password","post","push","handleSignIn","catch","err","error","handleRouteSearch","location","searchResults","routesResponse","routes","filter","cityLatLon","handleAddRoute","routeId","handleUnmount","handleDelete","delete","filteredProjects","eachRoute","handleEdit","patch","updatedRoute","path","render","routeProps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kWAAaA,EAAU,yC,eCyBRC,G,MAnBG,SAACC,GACf,OACI,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,UAAU,UAAzC,UACI,cAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,WAA3B,kBAEIJ,EAAMM,gBACF,wBAAQC,QAASP,EAAMQ,SAAUJ,UAAU,aAA3C,oBAEA,eAAC,IAAMK,SAAP,WACI,cAAC,IAAD,CAAMJ,GAAG,WAAT,qBACA,cAAC,IAAD,CAAMA,GAAG,WAAT,6BCQTK,EAtBA,SAACV,GACZ,OACI,uBAAMW,SAAUX,EAAMY,SAAtB,UACI,sBAAKR,UAAU,aAAf,UACI,8CACA,uBAAOS,KAAK,OAAOT,UAAU,eAAeU,GAAG,gBAAgBC,KAAK,gBAExE,sBAAKX,UAAU,aAAf,UACI,2CACA,uBAAOS,KAAK,QAAQT,UAAU,eAAeU,GAAG,aAAaC,KAAK,QAAQC,mBAAiB,iBAE/F,sBAAKZ,UAAU,aAAf,UACI,8CACA,uBAAOS,KAAK,WAAWT,UAAU,eAAeU,GAAG,gBAAgBC,KAAK,aACxE,uBACA,uBAAOD,GAAG,uBAAuBV,UAAU,uBAA3C,yIAEJ,wBAAQS,KAAK,SAAST,UAAU,kBAAhC,wBCMGa,EAvBA,SAACjB,GACZ,OACI,uBAAMW,SAAUX,EAAMkB,SAAtB,UACI,sBAAKd,UAAU,aAAf,UACI,0CACA,uBAAOe,SAAUnB,EAAMoB,UAAWP,KAAK,QAAQT,UAAU,eAAeU,GAAG,aAAaC,KAAK,QAAQC,mBAAiB,iBAE1H,sBAAKZ,UAAU,aAAf,UACI,6CACA,uBAAOW,KAAK,WAAWF,KAAK,WAAWT,UAAU,eAAeU,GAAG,qBAEvE,wBAAQD,KAAK,SAAST,UAAU,kBAAhC,oBAGIJ,EAAMqB,aACF,mBAAGC,MAAO,CAACC,MAAO,OAAlB,SAA2BvB,EAAMqB,eAChC,S,wBCQNG,G,MApBK,SAACxB,GACjB,OACI,8BACA,eAACyB,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACC,EAAA,EAAD,CAAOC,IAAI,yBAAyBC,IAAI,mBAAmBC,eAAa,IAEpE9B,EAAMM,gBAAoB,yCAAYN,EAAMM,gBAAgByB,SAAlC,OAAsD,KAEpF,cAACC,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,QAA1B,SAAkC,cAAC,IAAD,CAAM7B,GAAG,oBAAoBD,UAAU,aAAvC,wBAClC,uBACA,cAAC4B,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,QAA1B,SAAkC,cAAC,IAAD,CAAM7B,GAAG,mBAAmBD,UAAU,aAAtC,6BAClC,uBACA,cAAC4B,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,QAA1B,SAAkC,cAAC,IAAD,CAAM7B,GAAG,iBAAiBD,UAAU,aAApC,4BAClC,uBACA,cAAC4B,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAQ,QAA1B,SAAkC,cAAC,IAAD,CAAM7B,GAAG,iBAAiBD,UAAU,cAApC,oC,QCY/B+B,G,MA3BK,SAACnC,GAAW,IAEpBoC,EAAepC,EAAfoC,WAGR,OACI,cAAC,IAAM3B,SAAP,CAAgBL,UAAU,YAA1B,SAEQgC,EAAWC,KAAI,SAACC,GACZ,OACI,cAACb,EAAA,EAAD,CAA2BrB,UAAU,aAArC,SACI,eAACmC,EAAA,EAAD,CAAMb,OAAK,EAAX,UACQ,cAACa,EAAA,EAAKC,MAAN,UAAaF,EAAMG,YACnB,cAACF,EAAA,EAAKG,SAAN,CAAetC,UAAU,kBAAzB,SAA4CkC,EAAMK,YAClD,eAACJ,EAAA,EAAKK,KAAN,8BACiBN,EAAMO,iBAEvB,cAACN,EAAA,EAAKO,KAAN,UAAW,cAAC,IAAD,CAAMzC,GAAE,mBAAciC,EAAMS,KAA5B,6BAPPT,EAAMS,Y,yDCsD/BC,EAhEM,SAAChD,GAElB,IAAMiD,EAAWjD,EAAMkD,aAAeC,OAAOC,OAAOpD,EAAMkD,cAAgB,CAAC,QAAQ,KAEnFG,qBAAU,kBAECC,IAAEC,KAAKC,QAAQC,UAAUC,YAChCJ,IAAEC,KAAKC,QAAQG,aAAa,CAC1BC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,QAEpB,IAELR,qBAAU,WACN,OAAOrD,EAAMoB,YACd,IAEH,IAAM4C,EAAwBhE,EAAMgE,uBAAyB,GAG7D,OAFAC,QAAQC,IAAI,yBAA0BF,GAGlC,eAAC,IAAMvD,SAAP,WACI,+CACA,uBAAME,SAAUX,EAAMmE,cAAtB,UACI,uBAAOtD,KAAK,OAAOE,KAAK,WAAWqD,YAAY,aAC1C,yBAAQrD,KAAK,YAAb,UACG,wBAAQsD,MAAM,UAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,OAAd,qBAER,wBAAQxD,KAAK,SAAb,uBAGAmD,EAAsBM,OACtB,eAACC,EAAA,EAAD,CAAcjD,MAAO,CAACkD,MAAO,QAASC,OAAQ,SAAUC,OAAQzB,EAAU0B,KAAM,GAAIC,iBAAiB,EAArG,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAGAf,EAAsB3B,KAAI,SAACC,EAAO0C,GAC9B,IAAIC,EAAkB,CAAC3C,EAAM4C,SAAU5C,EAAM6C,WACvCC,EAAe9B,IAAE+B,KAAK,CAAEvB,QAAS,oFACvC,OACI,cAACwB,EAAA,EAAD,CAAQD,KAAMD,EAAcnC,SAAUgC,EAAtC,SACI,eAACM,EAAA,EAAD,oBACWjD,EAAMvB,KACb,uBAFJ,SAGWuB,EAAMzB,KACb,uBAJJ,WAKayB,EAAMkD,OACf,uBACA,wBAAQjF,QAAU,WAAOP,EAAMyF,WAAWnD,EAAMxB,KAAhD,2BARmDwB,EAAMxB,UAcjF,SChBL4E,EA1CM,SAAC1F,GAAW,IAAD,EAEF2F,mBAAS,IAFP,mBAErBrD,EAFqB,KAEdsD,EAFc,KAI5BvC,qBAAU,WAEN,IAAIwC,EAAY7F,EAAM8F,MAAMC,OAAOF,UAEnCG,IAAMC,IAAN,UAAanG,EAAb,oBAAgC+F,GAAa,CAAEK,iBAAiB,IAC3DC,MAAK,SAACC,GACHnC,QAAQC,IAAI,qBAAsBkC,GAClCR,EAASQ,EAASC,WAE3B,IAbyB,IAepBtD,EAAyGT,EAAzGS,IAAKN,EAAoGH,EAApGG,UAAWE,EAAyFL,EAAzFK,UAAW2D,EAA8EhE,EAA9EgE,YAAaC,EAAiEjE,EAAjEiE,aAAcC,EAAmDlE,EAAnDkE,cAAe3D,EAAoCP,EAApCO,cAAe4D,EAAqBnE,EAArBmE,iBAE5F,OACI,+CACiBhE,EACb,uBAFJ,eAGiBE,EACb,uBAJJ,iBAKmB2D,EACf,uBAEiB,WAAb3D,EAAyB,KAAQ,gDAAmB4D,KAExD,uBACCC,EACD,uBAZJ,mBAasB3D,EAClB,uBAdJ,sBAeyB4D,EAErB,uBACA,cAAC,IAAD,CAAMpG,GAAE,gBAAW0C,GAAnB,SAA0B,4CAC1B,wBAAQxC,QAAU,WAAQP,EAAM0G,SAAS3D,IAAzC,wBCkBG4D,EAxDG,SAAC3G,GAAW,IAAD,EAEC2F,mBAAS,IAFV,mBAElBrD,EAFkB,KAEXsD,EAFW,KAIzBvC,qBAAU,WAEN,IAAIwC,EAAY7F,EAAM8F,MAAMC,OAAOF,UAEnCG,IAAMC,IAAN,UAAanG,EAAb,oBAAgC+F,GAAa,CAAEK,iBAAiB,IAC3DC,MAAK,SAACC,GACHnC,QAAQC,IAAI,qBAAsBkC,GAClCR,EAASQ,EAASC,WAE3B,IAEH,IAMQ5D,EAA8GH,EAA9GG,UAAWE,EAAmGL,EAAnGK,UAAW2D,EAAwFhE,EAAxFgE,YAAaC,EAA2EjE,EAA3EiE,aAAcC,EAA6DlE,EAA7DkE,cAAe3D,EAA8CP,EAA9CO,cAAe4D,EAA+BnE,EAA/BmE,iBAAkBG,EAAatE,EAAbsE,SAEzG,OACI,uBAAMjG,SAAW,SAACkG,GAAW7G,EAAM8G,OAAOD,EAAOvE,IAAjD,yBACiBG,EACb,uBAFJ,eAGiBE,EACb,uBAJJ,iBAKmB2D,EACf,uBAEiB,WAAb3D,EAAyB,KAAQ,gDAAmB4D,KAExD,uBACCC,EACD,uBACA,qDACA,uBAAOzF,KAAK,gBAAgBI,SAvBV,SAAC0F,GACvB,IAAIE,EAAaC,KAAKC,MAAMD,KAAKE,UAAU5E,IAC3CyE,EAAWlE,cAAgBgE,EAAMM,OAAO9C,MACxCuB,EAASmB,IAoBoDlG,KAAK,OAAOwD,MAAOxB,IAC5E,uBACA,uDACA,uBAAO9B,KAAK,mBAAmBF,KAAK,OAAOwD,MAAOoC,IAClD,uBACA,0CACA,yBAAQ1F,KAAK,WAAb,UACI,wBAAQsD,MAAOuC,EAAf,SAA0BA,IAC1B,wBAAQvC,MAAM,UAAd,qBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,qBAEJ,uBACA,wBAAQxD,KAAK,SAAb,sBC0JGuG,eA/LH,WAAO,IAAD,EAE8BzB,mBAAS,MAFvC,mBAETrF,EAFS,KAEQ+G,EAFR,OAGwB1B,mBAAS,MAHjC,mBAGTtE,EAHS,KAGKiG,EAHL,OAIoB3B,mBAAS,IAJ7B,mBAITvD,EAJS,KAIGmF,EAJH,OAK0C5B,mBAAS,IALnD,mBAKT3B,EALS,KAKcwD,EALd,OAMwB7B,mBAAS,MANjC,mBAMTzC,EANS,KAMKuE,EANL,KAQVC,EAAUC,cAEhBtE,qBAAU,WACH/C,GACH0F,IAAMC,IAAN,UAAanG,EAAb,YAAgC,CAAEoG,iBAAiB,IAChDC,MAAK,SAACC,GACLnC,QAAQC,IAAIkC,EAASC,MACrBgB,EAAmBjB,EAASC,SAIlCL,IAAMC,IAAN,UAAanG,EAAb,eAAmC,CAAEoG,iBAAiB,IACnDC,MAAK,SAACC,GACLmB,EAAcnB,EAASC,WAE1B,IAEH,IAAMuB,EAAe,SAACf,GACpBA,EAAMgB,iBADwB,MAGQhB,EAAMM,OAApCpF,EAHsB,EAGtBA,SAAU+F,EAHY,EAGZA,MAAOC,EAHK,EAGLA,SAEzB/B,IAAMgC,KAAN,UAAclI,EAAd,WAAgC,CAC9BiC,SAAUA,EAASsC,MACnByD,MAAOA,EAAMzD,MACb0D,SAAUA,EAAS1D,OAClB,CAAC6B,iBAAiB,IAClBC,MAAK,SAACC,GACLiB,EAAmBjB,EAASC,MAC5BqB,EAAQO,KAAK,aAIbC,EAAe,SAACrB,GACpBA,EAAMgB,iBADwB,MAGFhB,EAAMM,OAA1BW,EAHsB,EAGtBA,MAAOC,EAHe,EAGfA,SAEf/B,IAAMgC,KAAN,UAAclI,EAAd,WAAgC,CAC9BgI,MAAOA,EAAMzD,MACb0D,SAAUA,EAAS1D,OAClB,CAAE6B,iBAAiB,IACnBC,MAAK,SAACC,GACLiB,EAAmBjB,EAASC,MAC5BqB,EAAQO,KAAK,YAEdE,OAAM,SAACC,GACNd,EAAgBc,EAAIhC,SAASC,KAAKgC,WAYlCC,EAAoB,SAACzB,GACzBA,EAAMgB,iBAD6B,MAGHhB,EAAMM,OAA9BoB,EAH2B,EAG3BA,SAAU5F,EAHiB,EAGjBA,UAClBsB,QAAQC,IAAIvB,EAAU0B,OAEtB2B,IAAMC,IAAN,UAAanG,EAAb,sBAAkCyI,EAASlE,OAAS,CAAE6B,iBAAiB,IACpEC,MAAK,SAACC,GACL,IAAIoC,EAAgBpC,EAASC,KAAKoC,eAAeC,OACjDlB,EAAyBgB,EAAcG,QAAO,SAACrG,GAC3C,OAAOA,EAAMzB,OAAS8B,EAAU0B,UAEpCoD,EAAgBrB,EAASC,KAAKuC,YAC9B3E,QAAQC,IAAI,kBAAmBF,OAI/B6E,EAAiB,SAACC,GAEtB9C,IAAMC,IAAN,UAAanG,EAAb,+BAA2CgJ,GAAW,CAAE5C,iBAAiB,IACtEC,MAAK,SAACC,GACLmB,EAAa,WAAb,cAAiBnF,GAAjB,QAA6BgE,KAC7BsB,EAAQO,KAAK,aAIbc,EAAgB,WACpBvB,EAAyB,OAIrBwB,EAAe,SAACnD,GACpBG,IAAMiD,OAAN,UAAgBnJ,EAAhB,mBAAkC+F,GAAa,CAAEK,iBAAiB,IAC/DC,MAAK,WAEJ,IAAI+C,EAAmB9G,EAAWuG,QAAO,SAACQ,GACpC,OAAOA,EAAUpG,MAAQ8C,KAG/B0B,EAAc2B,GACdxB,EAAQO,KAAK,aAIbmB,EAAa,SAACvC,EAAOvE,GACzBuE,EAAMgB,iBACN5D,QAAQC,IAAI,YAAa5B,EAAMS,KAFI,MAImB8D,EAAMM,OAApDtE,EAJ2B,EAI3BA,cAAe4D,EAJY,EAIZA,iBAAkBG,EAJN,EAIMA,SAGzCZ,IAAMqD,MAAN,UAAevJ,EAAf,iBAA+BwC,EAAMS,KAAO,CAC1CF,cAAeA,EAAcwB,MAC7BoC,iBAAkBA,EAAiBpC,MACnCuC,SAAUA,EAASvC,OAClB,CAAE6B,iBAAiB,IACnBC,MAAK,WACJ,IAAImD,EAAelH,EAAWC,KAAI,SAAC8G,GAIjC,OAHIA,EAAUpG,KAAOT,EAAMS,MACzBoG,EAAY7G,GAEP6G,KAGT5B,EAAc+B,GACd5B,EAAQO,KAAK,aAInB,OACE,sBAAK7H,UAAU,MAAf,UACE,8CACA,cAAC,EAAD,CAAWI,SAhFM,WACnBwF,IAAMgC,KAAN,UAAclI,EAAd,WAAgC,GAAI,CAAEoG,iBAAiB,IACpDC,MAAK,WACJkB,EAAmB,MACnBK,EAAQO,KAAK,SA4EoB3H,gBAAiBA,IAEpD,eAAC,IAAD,WAEE,cAAC,IAAD,CAAOiJ,KAAK,WAAWC,OAAS,SAACC,GAC/B,OAAO,cAAC,EAAD,aAAQ7I,SAAUgH,GAAkB6B,OAG7C,cAAC,IAAD,CAAOF,KAAK,WAAWC,OAAS,SAACC,GAC/B,OAAO,cAAC,EAAD,yBAAQvI,SAAUgH,GAAkBuB,GAApC,IAAgDpI,aAAcA,QAGvE,cAAC,IAAD,CAAOkI,KAAK,QAAQC,OAAS,WAC3B,OAAO,cAAC,EAAD,CAAalJ,gBAAiBA,OAGvC,cAAC,IAAD,CAAOiJ,KAAK,oBAAoBC,OAAS,SAACC,GACxC,OAAO,cAAC,EAAD,2BAAiBA,GAAjB,IAA6B/C,SAAUsC,EAAc5G,WAAYA,EAAWuG,QAAO,SAACrG,GACzF,MAA0B,YAAnBA,EAAMsE,kBAIjB,cAAC,IAAD,CAAO2C,KAAK,mBAAmBC,OAAS,SAACC,GACvC,OAAO,cAAC,EAAD,2BAAiBA,GAAjB,IAA6B/C,SAAUsC,EAAc5G,WAAYA,EAAWuG,QAAO,SAACrG,GACzF,MAA0B,WAAnBA,EAAMsE,kBAIjB,cAAC,IAAD,CAAO2C,KAAK,iBAAiBC,OAAS,SAACC,GACrC,OAAO,cAAC,EAAD,2BAAiBA,GAAjB,IAA6B/C,SAAUsC,EAAc5G,WAAYA,EAAWuG,QAAO,SAACrG,GACzF,MAA0B,SAAnBA,EAAMsE,kBAIjB,cAAC,IAAD,CAAO2C,KAAK,iBAAiBC,OAAS,SAACC,GACrC,OAAO,cAAC,EAAD,2BAAkBA,GAAlB,IAA8BtF,cAAemE,EAAmB7C,WAAYoD,EAAgB7E,sBAAuBA,EAAuBd,aAAcA,EAAc9B,UAAW2H,QAG1L,cAAC,IAAD,CAAOQ,KAAK,sBAAsBC,OAAS,SAACC,GAC1C,OAAO,cAAC,EAAD,2BAAkBA,GAAlB,IAA8B/C,SAAUsC,QAGjD,cAAC,IAAD,CAAOO,KAAK,mBAAmBC,OAAS,SAACC,GACvC,OAAO,cAAC,EAAD,2BAAeA,GAAf,IAA2B3C,OAAQsC,iBC7LrCM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASV,OACP,cAAC,IAAD,UACE,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.12888f2f.chunk.js","sourcesContent":["export const API_URL = 'https://send-it-list.herokuapp.com/api'","import React from 'react'\nimport { Navbar } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nimport './SILNavBar.css'\n\nconst SILNavBar = (props) => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\" className=\"nav-bar\">\n            <Link to=\"/home\" className=\"home-btn\">Home</Link>\n            {\n                props.loggedInClimber ? (\n                    <button onClick={props.onLogout} className=\"logout-btn\">Logout</button>\n                ) : (\n                    <React.Fragment>\n                        <Link to=\"/sign-in\">Sign In</Link>\n                        <Link to=\"/sign-up\">Sign Up</Link>\n                    </React.Fragment>                            \n                )\n            }\n\n        </Navbar>\n    )\n}\n\nexport default SILNavBar","import React from 'react'\n\nconst SignUp = (props) => {\n    return (\n        <form onSubmit={props.onSignUp}>\n            <div className=\"form-group\">\n                <label>Username </label>\n                <input type=\"text\" className=\"form-control\" id=\"usernameInput\" name=\"username\" />\n            </div>\n            <div className=\"form-group\">\n                <label>Email </label>\n                <input type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" aria-describedby=\"emailHelp\" />\n            </div>\n            <div className=\"form-group\">\n                <label>Password </label>\n                <input type=\"password\" className=\"form-control\" id=\"passwordInput\" name=\"password\" />\n                <br />\n                <small id=\"passwordRequirements\" className=\"form-text text-muted\">Password requirements: Minimum 8 characters, a number, a special character, an uppercase letter, and a lowercase letter.</small>                \n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        </form>\n    )\n}\n\nexport default SignUp","import React from 'react'\n\nconst SignIn = (props) => {\n    return (\n        <form onSubmit={props.onSignIn}>\n            <div className=\"form-group\">\n                <label>Email</label>\n                <input onChange={props.onUnmount} type=\"email\" className=\"form-control\" id=\"emailInput\" name=\"email\" aria-describedby=\"emailHelp\" />\n            </div>\n            <div className=\"form-group\">\n                <label>Password</label>\n                <input name=\"password\" type=\"password\" className=\"form-control\" id=\"passwordInput\" />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>  \n\n            {\n                props.errorMessage ? (\n                    <p style={{color: 'red'}}>{props.errorMessage}</p>\n                ) : (null)\n            }\n\n        </form>\n    )\n}\n\nexport default SignIn","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Container, Image, Button } from 'react-bootstrap'\n\nimport './ClimberHome.css'\n\nconst ClimberHome = (props) => {\n    return(\n        <div>\n        <Container fluid>\n            <Image src=\"/images/profilePic.png\" alt=\"temp profile pic\" roundedCircle />\n            {\n                props.loggedInClimber ? ( <h2>Hello, {props.loggedInClimber.username}!</h2> ) : null\n            }\n            <Button size=\"lg\" variant=\"light\"><Link to=\"/current-projects\" className=\"proj-links\">Projects</Link></Button>\n            <br />\n            <Button size=\"lg\" variant=\"light\"><Link to=\"/future-projects\" className=\"proj-links\">Want to climb</Link></Button>\n            <br />\n            <Button size=\"lg\" variant=\"light\"><Link to=\"/sent-projects\" className=\"proj-links\">Have climbed</Link></Button>\n            <br />\n            <Button size=\"lg\" variant=\"light\"><Link to=\"/search-routes\" className=\"search-link\">Search routes</Link></Button>\n        </Container>    \n        </div>\n    )\n}\n\nexport default ClimberHome","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Container, Card } from 'react-bootstrap'\nimport './ProjectList.css'\n\nconst ProjectList = (props) => {\n\n    const { myProjects } = props\n    //console.log(myProjects)\n\n    return (\n        <React.Fragment className=\"all-cards\">\n            {\n                myProjects.map((route) => {\n                    return (\n                        <Container key={route._id} className=\"route-card\">\n                            <Card fluid>\n                                    <Card.Title>{route.routeName}</Card.Title>\n                                    <Card.Subtitle className=\"mb-2 text-muted\">{route.routeType}</Card.Subtitle>\n                                    <Card.Text>\n                                    Personal Notes: {route.personalNotes}\n                                    </Card.Text>\n                                    <Card.Link><Link to={`/details/${route._id}`}>More info</Link></Card.Link>\n                            </Card>\n                        </Container>\n                    )\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default ProjectList","import React, {useState, useEffect} from 'react'\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport L from 'leaflet';\n\nconst SearchRoutes = (props) => {\n    \n    const position = props.searchedCity ? Object.values(props.searchedCity) : [51.505,-0.09]\n\n    useEffect(() => {\n        //for leaflet marker\n        delete L.Icon.Default.prototype._getIconUrl;\n        L.Icon.Default.mergeOptions({\n          iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n          iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n          shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n        });\n      }, []);\n\n    useEffect(() => {\n        return props.onUnmount\n    }, [])\n\n    const searchedRoutesResults = props.searchedRoutesResults || []\n    console.log('within searchroutes js', searchedRoutesResults)\n\n    return(\n        <React.Fragment>\n            <h1>Search Routes</h1>\n            <form onSubmit={props.onRouteSearch}>\n                <input type=\"text\" name=\"location\" placeholder=\"Location\" />\n                     <select name=\"routeType\">\n                        <option value=\"Boulder\">Boulder</option>\n                        <option value=\"Sport\">Sport</option>\n                        <option value=\"Trad\">Trad</option>\n                    </select>\n                <button type=\"submit\">Submit</button>\n            </form>\n            {\n                searchedRoutesResults.length ? (\n                <MapContainer style={{width: '900px', height: '400px'}} center={position} zoom={13} scrollWheelZoom={false}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                        {\n                            searchedRoutesResults.map((route, i) => {\n                                let positionMarker  = [route.latitude, route.longitude]\n                                const customMarker = L.icon({ iconUrl: 'https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-32.png', })\n                                return  (\n                                    <Marker icon={customMarker} position={positionMarker} key={route.id}>\n                                        <Popup>\n                                            Name: {route.name}\n                                            <br />\n                                            Type: {route.type}\n                                            <br />\n                                            Rating: {route.rating}\n                                            <br />\n                                            <button onClick={ () => {props.onAddRoute(route.id)} }>Add route</button>\n                                        </Popup>\n                                    </Marker>)\n                            })\n                        }\n                </MapContainer>\n                ) : null\n            }\n        </React.Fragment>\n    )\n}\nexport default SearchRoutes\n\n// import React, {useState, useEffect} from 'react'\n// import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\n// import 'leaflet/dist/leaflet.css'\n\n// const SearchRoutes = (props) => {\n\n//     const [lat, setLat] = useState(51.505)\n//     const [lon, setLon] = useState( -0.09)\n\n\n//     // useEffect(() => {\n//     //     //console.log('alltheparse', JSON.stringify(mapCenter))\n//     //     //if (props.searchedCity) console.log('somanyparentheses', JSON.stringify(Object.values(props.searchedCity)))\n//     //     let values;\n//     //     console.log(\"props\", props.searchedCity)\n//     //     if (props.searchedCity) values = Object.values(props.searchedCity)\n//     //     console.log(\"values\", values)\n//     //     if ( (props.searchedCity) && values[0] !== lat && values[1] !== lon ) {\n\n        \n//     //         console.log(\"updating the state\")\n//     //     setLat(values[0])\n//     //     setLon(values[1])\n//     //     }\n//     // }, [])\n\n  \n//     const searchedRoutesResults = props.searchedRoutesResults || []\n//     console.log(searchedRoutesResults)\n//     return(\n//         <React.Fragment>\n\n//             <h1>Search Routes</h1>\n//             <h1>{51.585}</h1>\n//             <form onSubmit={props.onRouteSearch}>\n//                 <input type=\"text\" name=\"location\" placeholder=\"Location\" />\n//                      <select name=\"routeType\">\n//                         <option value=\"Boulder\">Boulder</option>\n//                         <option value=\"Sport\">Sport</option>\n//                         <option value=\"Trad\">Trad</option>\n//                     </select>\n//                 <button type=\"submit\">Submit</button>\n//             </form>\n//             {\n//                 searchedRoutesResults.length ? (\n//             <MapContainer style={{width: '300px', height: '400px'}} center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false}>\n//                 <TileLayer\n//                     attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n//                     url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//                 />\n// {\n//                         searchedRoutesResults.splice(0, 5).map((route, i) => {\n//                             let position  = [51.985 +i,15.17+i]\n//                         return <Marker position={[position]} key={route.id}>\n//                             <Popup >\n//                                 Name: `${route.name}`\n//                                 <br />\n//                                 Type: `${route.type}`\n//                                 <br />\n//                                 Rating: `${route.rating}`\n//                                 <button onClick={ () => {props.onAddRoute(route.id)} }></button>\n//                             </Popup>\n//                         </Marker>\n//                     })\n// }\n//             </MapContainer>\n//                     ) : null\n//                 }\n\n\n\n//         </React.Fragment>\n//     )\n// }\n\n// export default SearchRoutes","import React, { useState, useEffect } from 'react'\nimport {Link} from 'react-router-dom'\nimport axios from 'axios'\n\nimport {API_URL} from '../../config'\n\nconst RouteDetails = (props) => {\n\n    const [route, setRoute] = useState({})\n\n    useEffect(() => {\n        //console.log('routeprops', props)\n        let routeDbId = props.match.params.routeDbId\n\n        axios.get(`${API_URL}/details/${routeDbId}`, { withCredentials: true })\n            .then((response) => {\n                console.log('routedbid response', response)\n                setRoute(response.data)\n            })\n    }, [])\n\n    const { _id, routeName, routeType, routeRating, routePitches, routeLocation, personalNotes, dateAccomplished } = route\n\n    return (\n        <div>\n            Route Name: {routeName}\n            <br />\n            Route Type: {routeType}\n            <br />\n            Route Rating: {routeRating}\n            <br />\n            {\n                routeType == 'Boulder' ? null : (<p>Route Pitches: {routePitches}</p>)\n            }\n            <br />\n            {routeLocation}\n            <br />\n            Personal Notes: { personalNotes }\n            <br />\n            Date Accomplished: { dateAccomplished }\n            {/* need a ternary here for if listType is sent */}\n            <br />\n            <Link to={`/edit/${_id}`}><button>Edit</button></Link>\n            <button onClick={ () => { props.onDelete(_id) } }>Delete</button>\n        </div>\n    )\n}\n\nexport default RouteDetails","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport {API_URL} from '../../config'\n\nconst EditRoute = (props) => {\n\n    const [route, setRoute] = useState({})\n\n    useEffect(() => {\n        //console.log('routeprops', props)\n        let routeDbId = props.match.params.routeDbId\n\n        axios.get(`${API_URL}/details/${routeDbId}`, { withCredentials: true })\n            .then((response) => {\n                console.log('routedbid response', response)\n                setRoute(response.data)\n        })\n    }, [])\n\n    const personalNotesEdit = (event) => {\n        let cloneNotes = JSON.parse(JSON.stringify(route))\n        cloneNotes.personalNotes = event.target.value\n        setRoute(cloneNotes)\n    }\n\n    const { routeName, routeType, routeRating, routePitches, routeLocation, personalNotes, dateAccomplished, listType } = route\n\n    return (\n        <form onSubmit={ (event) => {props.onEdit(event, route)}}>\n            Route Name: {routeName}\n            <br />\n            Route Type: {routeType}\n            <br />\n            Route Rating: {routeRating}\n            <br />\n            {\n                routeType == 'Boulder' ? null : (<p>Route Pitches: {routePitches}</p>)\n            }\n            <br />\n            {routeLocation}\n            <br />\n            <label>Personal Notes: </label>\n            <input name=\"personalNotes\" onChange={personalNotesEdit} type=\"text\" value={personalNotes}></input>\n            <br />\n            <label>Date Accomplished </label>\n            <input name=\"dateAccomplished\" type=\"text\" value={dateAccomplished}></input>\n            <br />\n            <label>List </label>\n            <select name=\"listType\">\n                <option value={listType}>{listType}</option>\n                <option value=\"current\">Current</option>\n                <option value=\"future\">Future</option>\n                <option value=\"sent\">Sent</option>\n            </select>\n            <br />\n            <button type=\"submit\">Edit</button>\n        </form>\n    )\n}\n\nexport default EditRoute","import React, { useState, useEffect } from 'react'\nimport { Switch, Route, withRouter, useHistory } from 'react-router-dom'\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport axios from 'axios'\n\nimport {API_URL} from './config'\n\nimport SILNavBar from './components/silnavbar/SILNavBar'\nimport SignUp from './components/signup/SignUp'\nimport SignIn from './components/signin/SignIn'\nimport ClimberHome from './components/climberhome/ClimberHome'\nimport ProjectList from './components/projectlist/ProjectList'\nimport SearchRoutes from './components/searchroutes/SearchRoutes'\nimport RouteDetails from './components/routedetails/RouteDetails'\nimport EditRoute from './components/editroute/EditRoute'\n\nconst App = () => {\n\n  const [loggedInClimber, setLoggedInClimber] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [myProjects, setMyProjects] = useState([])\n  const [searchedRoutesResults, setSearchedRoutesResults] = useState([])\n  const [searchedCity, setSearchedCity] = useState(null)\n\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!loggedInClimber) {\n      axios.get(`${API_URL}/climber`, { withCredentials: true })\n        .then((response) => {\n          console.log(response.data)\n          setLoggedInClimber(response.data)\n        })\n    }\n\n    axios.get(`${API_URL}/myProjects`, { withCredentials: true })\n      .then((response) => {\n        setMyProjects(response.data)\n      })\n  }, [])\n\n  const handleSignUp = (event) => {\n    event.preventDefault();\n\n    const { username, email, password } = event.target\n\n    axios.post(`${API_URL}/signup`, {\n      username: username.value,\n      email: email.value,\n      password: password.value\n    }, {withCredentials: true})\n      .then((response) => {\n        setLoggedInClimber(response.data)\n        history.push('/home')\n      })\n  }\n\n  const handleSignIn = (event) => {\n    event.preventDefault();\n\n    const { email, password } = event.target\n\n    axios.post(`${API_URL}/signin`, {\n      email: email.value,\n      password: password.value\n    }, { withCredentials: true })\n      .then((response) => {\n        setLoggedInClimber(response.data)\n        history.push('/home')\n      })\n      .catch((err) => {\n        setErrorMessage(err.response.data.error)\n      })\n  }\n\n  const handleLogOut = () => {\n    axios.post(`${API_URL}/logout`, {}, { withCredentials: true })\n      .then(() => {\n        setLoggedInClimber(null)\n        history.push('/')\n      })\n  }\n\n  const handleRouteSearch = (event) => {\n    event.preventDefault();\n\n    const { location, routeType } = event.target\n    console.log(routeType.value)\n\n    axios.get(`${API_URL}/mapSearch/${location.value}`, { withCredentials: true })\n      .then((response) => {\n        let searchResults = response.data.routesResponse.routes\n        setSearchedRoutesResults(searchResults.filter((route) => {\n            return route.type === routeType.value\n            }))\n        setSearchedCity(response.data.cityLatLon)\n        console.log('within function', searchedRoutesResults)\n      })\n  }\n\n  const handleAddRoute = (routeId) => {\n\n    axios.get(`${API_URL}/add-climbing-route/${routeId}`, { withCredentials: true })\n      .then((response) => {\n        setMyProjects(...myProjects, response)\n        history.push('/home')\n      })\n  }\n\n  const handleUnmount = () => {\n    setSearchedRoutesResults(null)\n\n  }\n\n  const handleDelete = (routeDbId) => {\n    axios.delete(`${API_URL}/delete/${routeDbId}`, { withCredentials: true })\n      .then(() => {\n\n        let filteredProjects = myProjects.filter((eachRoute) => {\n              return eachRoute._id !== routeDbId\n          })\n\n        setMyProjects(filteredProjects)\n        history.push('/home')\n      })\n  }\n\n  const handleEdit = (event, route) => {\n    event.preventDefault();\n    console.log('routeDbId', route._id)\n\n    const { personalNotes, dateAccomplished, listType } = event.target\n    \n    //console.log('handle edit')\n    axios.patch(`${API_URL}/edit/${route._id}`, {\n      personalNotes: personalNotes.value,\n      dateAccomplished: dateAccomplished.value,\n      listType: listType.value\n    }, { withCredentials: true })\n      .then(() => {\n        let updatedRoute = myProjects.map((eachRoute) => {\n          if (eachRoute._id == route._id) {\n            eachRoute = route\n          }\n          return eachRoute\n        })\n\n        setMyProjects(updatedRoute)\n        history.push('/home')\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Send-It List</h1>\n      <SILNavBar onLogout={handleLogOut} loggedInClimber={loggedInClimber}/>\n\n      <Switch>\n\n        <Route path=\"/sign-up\" render={ (routeProps) => {\n          return <SignUp onSignUp={handleSignUp} {...routeProps} />\n        } }/>\n\n        <Route path=\"/sign-in\" render={ (routeProps) => {\n          return <SignIn onSignIn={handleSignIn} {...routeProps} errorMessage={errorMessage} />\n        } } />\n\n        <Route path=\"/home\" render={ () => {\n          return <ClimberHome loggedInClimber={loggedInClimber} />\n        } }/>\n\n        <Route path=\"/current-projects\" render={ (routeProps) => {\n          return <ProjectList {...routeProps} onDelete={handleDelete} myProjects={myProjects.filter((route) => {\n            return route.listType === 'current'\n            })} />\n        } }/>\n\n        <Route path=\"/future-projects\" render={ (routeProps) => {\n          return <ProjectList {...routeProps} onDelete={handleDelete} myProjects={myProjects.filter((route) => {\n            return route.listType === 'future'\n            })} />\n        } }/>\n\n        <Route path=\"/sent-projects\" render={ (routeProps) => {\n          return <ProjectList {...routeProps} onDelete={handleDelete} myProjects={myProjects.filter((route) => {\n            return route.listType === 'sent'\n            })} />\n        } }/>\n\n        <Route path=\"/search-routes\" render={ (routeProps) => {\n          return <SearchRoutes {...routeProps} onRouteSearch={handleRouteSearch} onAddRoute={handleAddRoute} searchedRoutesResults={searchedRoutesResults} searchedCity={searchedCity} onUnmount={handleUnmount}/>\n        } }/>\n\n        <Route path=\"/details/:routeDbId\" render={ (routeProps) => {\n          return <RouteDetails {...routeProps} onDelete={handleDelete} />\n        } }></Route>\n\n        <Route path=\"/edit/:routeDbId\" render={ (routeProps) => {\n          return <EditRoute {...routeProps} onEdit={handleEdit} />\n        } }></Route>\n\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default withRouter(App);\n\n//add onUnmount to signIn\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}